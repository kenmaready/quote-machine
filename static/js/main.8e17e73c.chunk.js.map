{"version":3,"sources":["quoteBag.js","actions/index.js","components/QuoteBox.js","components/App.js","reducers/quoteReducer.js","reducers/colorReducer.js","reducers/index.js","index.js"],"names":["quoteBag","quote","author","NUMBER_QUOTES","length","bgColors","randomQuoteSelector","selector","Math","floor","random","QuoteBox","onButtonClick","_this","props","getNewQuote","getNewBackgroundColor","tweetIntent","this","react_default","a","createElement","className","id","href","target","rel","onClick","React","Component","connect","state","newQuote","type","payload","color","App","style","backgroundColor","bgcolor","src_components_QuoteBox","INITIAL_STATE","combineReducers","arguments","undefined","action","store","createStore","reducers","ReactDOM","render","es","src_components_App","document","querySelector"],"mappings":"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","file":"static/js/main.8e17e73c.chunk.js","sourcesContent":["\r\n\r\nconst quoteBag = [\r\n    { quote : \"Talk is cheap. Show me the code.\" , author : \"Linus Torvalds\" },\r\n    { quote : \"When you don't create things, you become defined by your tastes rather than ability. Your tastes only narrow & exclude people. So create.\", author : \"Why The Lucky Stiff\" },\r\n    { quote : \"Programs must be written for people to read, and only incidentally for machines to execute.\", author : \"Harold Abelson\" },\r\n    { quote : \"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.\", author : \"John Woods\" },\r\n    { quote : \"Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.\", author : \"Rick Cook\"},\r\n    { quote : \"That's the thing about people who think they hate computers. What they really hate is lousy programmers.\", author : \"Larry Niven\" },\r\n    { quote : \"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\", author : \"Martin Fowler\" },\r\n    { quote : \"Give a man a program, frustrate him for a day. Teach a man to program, frustrate him for a lifetime.\", author: \"Muhammad Waseem\"},\r\n    { quote : \"Walking on water and developing software from a specification are easy if both are frozen.\", author : \"Edward V. Beard\"}\r\n]\r\n\r\nexport default quoteBag;","import quoteBag from \"../quoteBag.js\";\r\n\r\nconst GET_NEW_QUOTE = 'GET_NEW_QUOTE';\r\nconst NUMBER_QUOTES = quoteBag.length;\r\nconst GET_NEW_BACKGROUND_COLOR = 'GET_NEW_BACKGROUND_COLOR';\r\nconst bgColors = ['#636FA0', '#97D199', '#DB4F54', '#CAD627', '#D9AF55']\r\n\r\nexport const getNewQuote = () => {\r\n    const newQuote = randomQuoteSelector();\r\n    return {\r\n        type: GET_NEW_QUOTE,\r\n        payload: {\r\n            quote: newQuote.quote,\r\n            author: newQuote.author \r\n    }};\r\n};\r\n\r\nconst randomQuoteSelector = () => {\r\n    const selector = Math.floor(Math.random() * (NUMBER_QUOTES));\r\n    return quoteBag[selector];\r\n}\r\n\r\nexport const getNewBackgroundColor = () => {\r\n    const selector = Math.floor(Math.random() * bgColors.length);\r\n    return {\r\n        type: GET_NEW_BACKGROUND_COLOR,\r\n        payload: { color: bgColors[selector] }\r\n    };\r\n};","import React from 'react';\r\nimport './QuoteBox.css';\r\nimport { connect } from 'react-redux';\r\nimport { getNewQuote, getNewBackgroundColor } from '../actions';\r\n\r\nclass QuoteBox extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getNewQuote();\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        this.props.getNewQuote();\r\n        this.props.getNewBackgroundColor();\r\n    }\r\n\r\n    tweetIntent = () => {\r\n        return \"http://twitter.com/intent/tweet?text=\\\"\" + this.props.quote + \"\\\" via @QuoteGenerator\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <wrapper className=\"ui container\" id=\"quote-box\">\r\n                    <div className=\"ui centered grid\">\r\n                        <div className=\"fifteen wide centered column\">\r\n                            <div className=\"quote-text row\">\r\n                                <i className=\"fas fa-quote-left\" />\r\n                                &nbsp; &nbsp; &nbsp;\r\n                                <span id=\"text\">{this.props.quote}</span>\r\n                                &nbsp; &nbsp; &nbsp;\r\n                                <i className=\"fas fa-quote-right\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"ten wide column\">\r\n                            <div className=\"quote-author row\">\r\n                                <div id=\"author\">\r\n                                    <em>-- {this.props.author}</em>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"five wide left aligned column\">\r\n                                <a href={this.tweetIntent()} target=\"_blank\" id=\"tweet-quote\" rel=\"noopener noreferrer\"><i className=\"fab fa-twitter-square\"></i></a>\r\n                            </div>\r\n                            <div className=\"five wide right aligned column quote-button\">\r\n                                <button onClick={this.onButtonClick} className=\"mini ui primary button\" id=\"new-quote\">\r\n                                    New Quote\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </wrapper>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { quote: state.quote.quote,\r\n             author: state.quote.author\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { getNewQuote: getNewQuote, getNewBackgroundColor: getNewBackgroundColor })(QuoteBox);\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport QuoteBox from './QuoteBox.js';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui middle aligned grid fullPage\" style={{backgroundColor: this.props.bgcolor}}>\r\n                    <div className=\"center aligned column\">\r\n                        <QuoteBox />\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { bgcolor : state.color.color };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);","const GET_NEW_QUOTE = 'GET_NEW_QUOTE';\r\nconst INITIAL_STATE = { quote: '', author: ''};\r\n\r\nexport const quoteReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case GET_NEW_QUOTE:\r\n            return { quote: action.payload.quote, author: action.payload.author };\r\n        default:\r\n            return state;\r\n    }\r\n}","const GET_NEW_BACKGROUND_COLOR = 'GET_NEW_BACKGROUND_COLOR';\r\nconst INITIAL_STATE = { color: '#636FA0'};\r\n\r\nexport const colorReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case GET_NEW_BACKGROUND_COLOR:\r\n            return { color: action.payload.color };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { quoteReducer } from './quoteReducer.js';\r\nimport { colorReducer } from './colorReducer.js';\r\n\r\n\r\nexport default combineReducers({\r\n    quote: quoteReducer,\r\n    color: colorReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './components/App.js';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers);\r\n\r\nconst ProvidedApp = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    );\r\n}\r\n\r\nReactDOM.render(<ProvidedApp />, document.querySelector(\"#root\"));"],"sourceRoot":""}